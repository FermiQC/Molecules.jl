c3 = cos(π/3)
s3 = sin(π/3)
c5 = cos(π/5)
s5 = sin(π/5)
c25 = cos(2π/5)
s25 = sin(2π/5)

irrm_C1 = Dict("A"=>[[1]])
irrm_Cs = Dict("A'"=>[[1],[1]], "A''"=>[[1],[-1]])
irrm_Ci = Dict("Ag"=>[[1],[1]], "Au"=>[[1],[-1]])
irrm_C2 = Dict("A"=>[[1],[1]], "B"=>[[1],[-1]])
irrm_C3 = 0
irrm_C4 = 0
irrm_C5 = 0
irrm_C6 = 0
irrm_S4 = 0
irrm_S6 = 0
irrm_S8 = 0
irrm_C2h = 0
irrm_C3h = 0
irrm_C4h = 0
irrm_C5h = 0
irrm_C6h = 0
irrm_C2v = Dict(
    "A1" => [[1],[1],[1],[1]],
    "A2" => [[1],[1],[-1],[-1]],
    "B1" => [[1],[-1],[1],[-1]],
    "B2" => [[1],[-1],[-1],[1]])
irrm_C3v = Dict(
    "A1" => [[1],[1],[1],[1],[1],[1]],
    "A2" => [[1],[1],[1],[-1],[-1],[-1]],
    "E"  => [[1 0;0 1], [-c3 -s3; s3 -c3], [-c3 s3; -s3 -c3], [1 0;0 -1], [-c3 -s3; -s3 c3], [-c3 s3; s3 c3]])

irrm_C4v = Dict(
    "A1" => [[1],[1],[1],[1],[1],[1],[1],[1]],
    "A2" => [[1],[1],[1],[1],[-1],[-1],[-1],[-1]],
    "B1" => [[1],[-1],[1],[-1],[1],[1],[-1],[-1]],
    "B2" => [[1],[-1],[1],[-1],[-1],[-1],[1],[1]],
    "E"  => [[1 0;0 1],[0 -1; 1 0],[-1 0; 0 -1],[0 1; -1 0],[1 0; 0 -1],[-1 0; 0 1],[0 1; 1 0],[0 -1; -1 0]])

irrm_C5v = Dict(
    "A1" => [[1],[1],[1],[1],[1],[1],[1],[1],[1],[1]],
    "A2" => [[1],[1],[1],[1],[1],[-1],[-1],[-1],[-1],[-1]],
    "E1" => [[1 0;0 1],[c25 -s25; s25 c25],[-c5 -s5; s5 -c5],[-c5 s5; -s5 -c5],[c25 s25; -s25 c25],
             [1 0;0 -1],[-c5 s5; s5 c5],[c25 -s25; -s25 -c25],[c25 s25; s25 -c25],[-c5 -s5; -s5 c5]],
    "E2" => [[1 0;0 1],[-c5 -s5; s5 -c5],[c25 s25; -s25 c25],[c25 -s25; s25 c25],[-c5 s5; -s5 -c5],
             [1 0;0 -1],[c25 -s25; -s25 -c25],[-c5 -s5; -s5 c5],[-c5 s5; s5 c5],[c25 s25; s25 -c25]])

irrm_C6v = Dict(
    "A1" => [[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1]],
    "A2" => [[1],[1],[1],[1],[1],[1],[-1],[-1],[-1],[-1],[-1],[-1]],
    "B1" => [[1],[-1],[1],[-1],[1],[-1],[1],[1],[1],[-1],[-1],[-1]],
    "B2" => [[1],[-1],[1],[-1],[1],[-1],[-1],[-1],[-1],[1],[1],[1]],
    "E1" => [[1 0;0 1],[c3 -s3;s3 c3],[-c3 -s3;s3 -c3],[-1 0;0 -1],[-c3 s3;-s3 -c3],[c3 s3;-s3 c3],
             [1 0;0 -1],[-c3 s3;s3 c3],[-c3 -s3;-s3 c3],[c3 s3;s3 -c3],[-1 0;0 1],[c3 -s3;-s3 -c3]],
    "E2" => [[1 0;0 1],[-c3 s3;-s3 -c3],[-c3 -s3;s3 -c3],[1 0;0 1],[-c3 s3;-s3 -c3],[-c3 -s3;s3 -c3],
             [1 0;0 -1],[-c3 s3;s3 c3],[-c3 -s3;-s3 c3],[-c3 -s3;-s3 c3],[1 0;0 -1],[-c3 s3;s3 c3]])

irrm_D2 = Dict(
    "A" => [[1],[1],[1],[1]],
    "B1" => [[1],[1],[-1],[-1]],
    "B2" => [[1],[-1],[-1],[1]],
    "B3" => [[1],[-1],[1],[-1]]) # To preserve Cotton ordering, our symels are zxy and Cotton's are zyx (Essentially swap B2 and B3)
irrm_D3 = Dict(
    "A1" => [[1],[1],[1],[1],[1],[1]],
    "A2" => [[1],[1],[1],[-1],[-1],[-1]],
    "E" => [[1 0;0 1],[-c3 -s3;s3 -c3],[-c3 s3;-s3 -c3],[1 0;0 -1],[-c3 -s3;-s3 c3],[-c3 s3;s3 c3]])
irrm_D4 = Dict(
    "A1" => [[1],[1],[1],[1],[1],[1],[1],[1]],
    "A2" => [[1],[1],[1],[1],[-1],[-1],[-1],[-1]],
    "B1" => [[1],[-1],[1],[-1],[1],[1],[-1],[-1]],
    "B2" => [[1],[-1],[1],[-1],[-1],[-1],[1],[1]],
    "E" => [[1 0;0 1],[0 -1;1 0],[-1 0;0 -1],[0 1;-1 0],[1 0;0 -1],[-1 0;0 1],[0 1;1 0],[0 -1;-1 0]])
irrm_D5 = Dict(
    "A1" => [[1],[1],[1],[1],[1],[1],[1],[1],[1],[1]],
    "A2" => [[1],[1],[1],[1],[1],[-1],[-1],[-1],[-1],[-1]],
    "E1" => [[1 0;0 1],[c25 -s25; s25 c25],[-c5 -s5; s5 -c5],[-c5 s5; -s5 -c5],[c25 s25; -s25 c25],
             [1 0;0 -1],[-c5 s5; s5 c5],[c25 -s25; -s25 -c25],[c25 s25; s25 -c25],[-c5 -s5; -s5 c5]],
    "E2" => [[1 0;0 1],[-c5 -s5; s5 -c5],[c25 s25; -s25 c25],[c25 -s25; s25 c25],[-c5 s5; -s5 -c5],
             [1 0;0 -1],[c25 -s25; -s25 -c25],[-c5 -s5; -s5 c5],[-c5 s5; s5 c5],[c25 s25; s25 -c25]])
irrm_D6 = Dict(
    "A1" => [ [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1]],
    "A2" => [ [1], [1], [1], [1], [1], [1],[-1],[-1],[-1],[-1],[-1],[-1]],
    "B1" => [ [1],[-1], [1],[-1], [1],[-1], [1], [1], [1],[-1],[-1],[-1]],
    "B2" => [ [1],[-1], [1],[-1], [1],[-1],[-1],[-1],[-1], [1], [1], [1]],
    "E1" => [[1 0;0 1],[c3 -s3;s3 c3],[-c3 -s3;s3 -c3],[-1 0;0 -1],[-c3 s3;-s3 -c3],[c3 s3;-s3 c3],
             [1 0;0 -1],[-c3 s3;s3 c3],[-c3 -s3;-s3 c3],[c3 s3;s3 -c3],[-1 0;0 1],[c3 -s3;-s3 -c3]],
    "E2" => [[1 0;0 1],[-c3 s3;-s3 -c3],[-c3 -s3;s3 -c3],[1 0;0 1],[-c3 s3;-s3 -c3],[-c3 -s3;s3 -c3],
             [-1 0;0 1],[c3 -s3;-s3 -c3],[c3 s3;s3 -c3],[c3 s3;s3 -c3],[-1 0; 0 1],[c3 -s3;-s3 -c3]])
irrm_D2h = Dict(
    "Ag"  => [ [1], [1], [1], [1], [1], [1], [1], [1]],
    "B1g" => [ [1], [1], [1], [1],[-1],[-1],[-1],[-1]],
    "B2g" => [ [1],[-1], [1],[-1],[-1], [1], [1],[-1]],
    "B3g" => [ [1],[-1], [1],[-1], [1],[-1],[-1], [1]],
    "Au"  => [ [1],[-1],[-1], [1], [1], [1],[-1],[-1]],
    "B1u" => [ [1],[-1],[-1], [1],[-1],[-1], [1], [1]],
    "B2u" => [ [1], [1],[-1],[-1],[-1], [1],[-1], [1]],
    "B3u" => [ [1], [1],[-1],[-1], [1],[-1], [1],[-1]]) # Cotton ordering is different because I put x in front of y...
irrm_D3h = Dict(
    "A1'" => [[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1]],
    "A2'" => [[1],[1],[1],[1],[-1],[-1],[-1],[1],[1],[-1],[-1],[-1]],
    "E'"  => [[1 0;0 1],[1 0;0 1],[-c3 -s3;s3 -c3],[-c3 s3;-s3 -c3],[1 0;0 -1],[-c3 -s3;-s3 c3],[-c3 s3;s3 c3],
             [-c3 -s3;s3 -c3],[-c3 s3;-s3 -c3],[1 0;0 -1],[-c3 -s3;-s3 c3],[-c3 s3;s3 c3]],
    "A1''" => [[1],[-1],[1],[1],[1],[1],[1],[-1],[-1],[-1],[-1],[-1]],
    "A1''" => [[1],[-1],[1],[1],[-1],[-1],[-1],[-1],[-1],[1],[1],[1]],
    "E''" => [[1 0;0 1],[-1 0;0 -1],[-c3 -s3;s3 -c3],[-c3 s3;-s3 -c3],[1 0;0 -1],[-c3 -s3;-s3 c3],[-c3 s3;s3 c3],
             [c3 s3;-s3 c3],[c3 -s3;s3 c3],[-1 0;0 1],[c3 s3;s3 -c3],[c3 -s3;-s3 -c3]])
irrm_D4h = Dict(
    "A1g" => [ [1], [1], [1],  [1], [1], [1], [1], [1], [1], [1],   [1], [1], [1], [1], [1], [1]],
    "A2g" => [ [1], [1], [1],  [1], [1], [1],[-1],[-1],[-1],[-1],   [1], [1],[-1],[-1],[-1],[-1]],
    "B1g" => [ [1], [1], [1], [-1], [1],[-1], [1], [1],[-1],[-1],  [-1],[-1], [1], [1],[-1],[-1]],
    "B2g" => [ [1], [1], [1], [-1], [1],[-1],[-1],[-1], [1], [1],  [-1],[-1],[-1],[-1], [1], [1]],
    "Eg" => [[1 0;0 1],[-1 0;0 -1],[1 0;0 1],
             [0 -1;1 0],[-1 0;0 -1],[0 1;-1 0],[1 0;0 -1],[-1 0;0 1],[0 1;1 0],[0 -1;-1 0],
             [0 1;-1 0],[0 -1;1 0],[-1 0;0 1],[1 0;0 -1],[0 -1;-1 0],[0 1;1 0]],
    "A1u" => [ [1],[-1],[-1],  [1], [1], [1], [1], [1], [1], [1], [-1],[-1],[-1],[-1],[-1],[-1]],
    "A2u" => [ [1],[-1],[-1],  [1], [1], [1],[-1],[-1],[-1],[-1], [-1],[-1], [1], [1], [1], [1]],
    "B1u" => [ [1],[-1],[-1], [-1], [1],[-1], [1], [1],[-1],[-1],  [1], [1],[-1],[-1], [1], [1]],
    "B2u" => [ [1],[-1],[-1], [-1], [1],[-1],[-1],[-1], [1], [1],  [1], [1], [1], [1],[-1],[-1]],
    "Eu" => [[1 0;0 1],[1 0;0 1],[-1 0;0 -1],
             [0 -1;1 0],[-1 0;0 -1],[0 1;-1 0],[1 0;0 -1],[-1 0;0 1],[0 1;1 0],[0 -1;-1 0],
             [0 -1;1 0],[0 1;-1 0],[1 0;0 -1],[-1 0;0 1],[0 1;1 0],[0 -1;-1 0]])
irrm_D5h = Dict(
    "A1'" => [ [1], [1],  [1], [1], [1], [1], [1], [1], [1], [1], [1],
                          [1], [1], [1], [1], [1], [1], [1], [1], [1]],
    "A2'" => [ [1], [1],  [1], [1], [1], [1],[-1],[-1],[-1],[-1],[-1],
                          [1], [1], [1], [1],[-1],[-1],[-1],[-1],[-1]],
    "E1'" => [[1 0;0 1],[1 0;0 1], # E, σh
              [c25 -s25; s25 c25],[-c5 -s5; s5 -c5],[-c5 s5; -s5 -c5],[c25 s25; -s25 c25], # C5s
              [1 0;0 -1],[-c5 s5; s5 c5],[c25 -s25; -s25 -c25],[c25 s25; s25 -c25],[-c5 -s5; -s5 c5],
              [c25 -s25; s25 c25],[-c5 -s5; s5 -c5],[-c5 s5; -s5 -c5],[c25 s25; -s25 c25],
              [1 0;0 -1],[-c5 s5; s5 c5],[c25 -s25; -s25 -c25],[c25 s25; s25 -c25],[-c5 -s5; -s5 c5]],
    "E2'" => [[1 0;0 1],[1 0;0 1],
              [-c5 -s5; s5 -c5],[c25 s25; -s25 c25],[c25 -s25; s25 c25],[-c5 s5; -s5 -c5],
              [1 0;0 -1],[c25 -s25; -s25 -c25],[-c5 -s5; -s5 c5],[-c5 s5; s5 c5],[c25 s25; s25 -c25],
              [-c5 -s5; s5 -c5],[c25 s25; -s25 c25],[c25 -s25; s25 c25],[-c5 s5; -s5 -c5],
              [1 0;0 -1],[c25 -s25; -s25 -c25],[-c5 -s5; -s5 c5],[-c5 s5; s5 c5],[c25 s25; s25 -c25]],
    "A1''"=> [ [1],[-1],  [1], [1], [1], [1], [1], [1], [1], [1], [1],
                         [-1],[-1],[-1],[-1],[-1],[-1],[-1],[-1],[-1]],
    "A2''"=> [ [1],[-1],  [1], [1], [1], [1],[-1],[-1],[-1],[-1],[-1],
                         [-1],[-1],[-1],[-1], [1], [1], [1], [1], [1]],
    "E1''"=> [[1 0;0 1],[-1 0;0 -1], # E, σh
              [c25 -s25; s25 c25],[-c5 -s5; s5 -c5],[-c5 s5; -s5 -c5],[c25 s25; -s25 c25], # C5s
              [1 0;0 -1],[-c5 s5; s5 c5],[c25 -s25; -s25 -c25],[c25 s25; s25 -c25],[-c5 -s5; -s5 c5],
              [-c25 s25; -s25 -c25],[c5 s5; -s5 c5],[c5 -s5; s5 c5],[-c25 -s25; s25 -c25],
              [-1 0;0 1],[c5 -s5; -s5 -c5],[-c25 s25; s25 c25],[-c25 -s25; -s25 c25],[c5 s5; s5 -c5]],
    "E2''"=> [[1 0;0 1],[-1 0;0 -1],
              [-c5 -s5; s5 -c5],[c25 s25; -s25 c25],[c25 -s25; s25 c25],[-c5 s5; -s5 -c5],
              [1 0;0 -1],[c25 -s25; -s25 -c25],[-c5 -s5; -s5 c5],[-c5 s5; s5 c5],[c25 s25; s25 -c25],
              [c5 s5; -s5 c5],[-c25 -s25; s25 -c25],[-c25 s25; -s25 -c25],[c5 -s5; s5 c5],
              [-1 0;0 1],[-c25 s25; s25 c25],[c5 s5; s5 -c5],[c5 -s5; -s5 -c5],[-c25 -s25; -s25 c25]])
irrm_D6h = Dict(
    "A1g" => [ [1], [1], [1], # E, σh, i
               [1], [1], [1], [1], [1], # Cns
               [1], [1], [1], [1], [1], [1], # C2s
               [1], [1], [1], [1], # Sns
               [1], [1], [1], [1], [1], [1]], # σs
    "A2g" => [ [1], [1], [1], # E, σh, i
               [1], [1], [1], [1], [1], # Cns
              [-1],[-1],[-1],[-1],[-1],[-1], # C2s
               [1], [1], [1], [1], # Sns
              [-1],[-1],[-1],[-1],[-1],[-1]], # σs
    "B1g" => [ [1],[-1], [1], # E, σh, i
              [-1], [1],[-1], [1],[-1], # Cns
               [1], [1], [1],[-1],[-1],[-1], # C2s
               [1],[-1],[-1], [1], # Sns
              [-1],[-1],[-1], [1], [1], [1]], # σs
    "B2g" => [ [1],[-1], [1], # E, σh, i
              [-1], [1],[-1], [1],[-1], # Cns
              [-1],[-1],[-1], [1], [1], [1], # C2s
               [1],[-1],[-1], [1], # Sns
               [1], [1], [1],[-1],[-1],[-1]], # σs
    "E1g" => [[1 0;0 1],[-1 0;0 -1],[1 0;0 1],
              [c3 -s3;s3 c3],[-c3 -s3;s3 -c3],[-1 0;0 -1],[-c3 s3;-s3 -c3],[c3 s3;-s3 c3],
              [1 0;0 -1],[-c3 s3;s3 c3],[-c3 -s3;-s3 c3],[c3 s3;s3 -c3],[-1 0;0 1],[c3 -s3;-s3 -c3],
              [-c3 s3;-s3 -c3],[c3 s3;-s3 c3],[c3 -s3;s3 c3],[-c3 -s3;s3 -c3],
              #[c3 -s3;s3 c3],[-c3 -s3;s3 -c3],[-c3 s3;-s3 -c3],[c3 s3;-s3 c3],
              [-1 0;0 1],[c3 -s3;-s3 -c3],[c3 s3;s3 -c3],[-c3 -s3;-s3 c3],[1 0;0 -1],[-c3 s3;s3 c3]],
              #[1 0;0 -1],[-c3 s3;s3 c3],[-c3 -s3;-s3 c3],[c3 s3;s3 -c3],[-1 0;0 1],[c3 -s3;-s3 -c3]],
    "E2g" => [[1 0;0 1],[1 0;0 1],[1 0;0 1],
              [-c3 s3;-s3 -c3],[-c3 -s3;s3 -c3],[1 0;0 1],[-c3 s3;-s3 -c3],[-c3 -s3;s3 -c3],
              [-1 0;0 1],[c3 -s3;-s3 -c3],[c3 s3;s3 -c3],[c3 s3;s3 -c3],[-1 0; 0 1],[c3 -s3;-s3 -c3],
              [-c3 s3;-s3 -c3],[-c3 -s3;s3 -c3],[-c3 s3;-s3 -c3],[-c3 -s3;s3 -c3],
              [-1 0;0 1],[c3 -s3;-s3 -c3],[c3 s3;s3 -c3],[c3 s3;s3 -c3],[-1 0; 0 1],[c3 -s3;-s3 -c3]],
    "A1u" => [ [1],[-1],[-1], # E, σh, i
               [1], [1], [1], [1], [1], # Cns
               [1], [1], [1], [1], [1], [1], # C2s
              [-1],[-1],[-1],[-1], # Sns
              [-1],[-1],[-1],[-1],[-1],[-1]], # σs
    "A2u" => [ [1],[-1],[-1], # E, σh, i
               [1], [1], [1], [1], [1], # Cns
              [-1],[-1],[-1],[-1],[-1],[-1], # C2s
              [-1],[-1],[-1],[-1], # Sns
               [1], [1], [1], [1], [1], [1]], # σs
    "B1u" => [ [1], [1],[-1], # E, σh, i
              [-1], [1],[-1], [1],[-1], # Cns
               [1], [1], [1],[-1],[-1],[-1], # C2s
              [-1], [1], [1],[-1], # Sns
               [1], [1], [1],[-1],[-1],[-1]], # σs
    "B2u" => [ [1], [1],[-1], # E, σh, i
              [-1], [1],[-1], [1],[-1], # Cns
              [-1],[-1],[-1], [1], [1], [1], # C2s
              [-1], [1], [1],[-1], # Sns
              [-1],[-1],[-1], [1], [1], [1]], # σs
    "E1u" => [[1 0;0 1],[1 0;0 1],[-1 0;0 -1],
              [c3 -s3;s3 c3],[-c3 -s3;s3 -c3],[-1 0;0 -1],[-c3 s3;-s3 -c3],[c3 s3;-s3 c3],
              [1 0;0 -1],[-c3 s3;s3 c3],[-c3 -s3;-s3 c3],[c3 s3;s3 -c3],[-1 0;0 1],[c3 -s3;-s3 -c3],
              [c3 -s3;s3 c3],[-c3 -s3;s3 -c3],[-c3 s3;-s3 -c3],[c3 s3;-s3 c3],
              #[c3 -s3;s3 c3],[-c3 -s3;s3 -c3],[-c3 s3;-s3 -c3],[c3 s3;-s3 c3],
              [1 0;0 -1],[-c3 s3;s3 c3],[-c3 -s3;-s3 c3],[c3 s3;s3 -c3],[-1 0;0 1],[c3 -s3;-s3 -c3]],
              #[1 0;0 -1],[-c3 s3;s3 c3],[-c3 -s3;-s3 c3],[c3 s3;s3 -c3],[-1 0;0 1],[c3 -s3;-s3 -c3]],
    "E2u" => [[1 0;0 1],[-1 0;0 -1],[-1 0;0 -1],
              [-c3 s3;-s3 -c3],[-c3 -s3;s3 -c3],[1 0;0 1],[-c3 s3;-s3 -c3],[-c3 -s3;s3 -c3],
              [-1 0;0 1],[c3 -s3;-s3 -c3],[c3 s3;s3 -c3],[c3 s3;s3 -c3],[-1 0; 0 1],[c3 -s3;-s3 -c3],
              [c3 -s3;s3 c3],[c3 s3;-s3 c3],[c3 -s3;s3 c3],[c3 s3;-s3 c3],
              [1 0;0 -1],[-c3 s3;s3 c3],[-c3 -s3;-s3 c3],[-c3 -s3;-s3 c3],[1 0; 0 -1],[-c3 s3;s3 c3]])
irrm_D2d = 0
irrm_D3d = 0
irrm_D4d = 0
irrm_D5d = 0
irrm_D6d = 0
irrm_Td  = Dict(
    "A1" => [ [1], # E
              [1], [1], [1], [1], [1], [1], [1], [1], # C3
              [1], [1], [1], # C2
              [1], [1], [1], [1], [1], [1], # σd
              [1], [1], [1], [1], [1], [1]], # S4
    "A2" => [ [1], 
              [1], [1], [1], [1], [1], [1], [1], [1], 
              [1], [1], [1], 
              [-1],[-1],[-1],[-1],[-1],[-1],
              [-1],[-1],[-1],[-1],[-1],[-1]],
    "E"  => [[1 0;0 1],
             [-c3 -s3; s3 -c3],[-c3 s3; -s3 -c3],[-c3 -s3; s3 -c3],[-c3 s3; -s3 -c3],[-c3 -s3; s3 -c3],[-c3 s3; -s3 -c3],[-c3 -s3; s3 -c3],[-c3 s3; -s3 -c3],
             [1 0;0 1],[1 0;0 1],[1 0;0 1],
             [1 0; 0 -1],[1 0; 0 -1],[-c3 s3; s3 c3],[-c3 s3; s3 c3],[-c3 -s3; -s3 c3],[-c3 -s3; -s3 c3],
             [-c3 -s3; -s3 c3],[-c3 -s3; -s3 c3],[-c3 s3; s3 c3],[-c3 s3; s3 c3],[1 0;0 -1],[1 0;0 -1]],
    "T1" => [[1 0 0;0 1 0;0 0 1], # E
             [0 0 1;1 0 0;0 1 0],[0 1 0;0 0 1;1 0 0],[0 0 1;-1 0 0;0 -1 0],[0 -1 0;0 0 -1;1 0 0], # C3 (α,β)
             [0 0 -1;1 0 0;0 -1 0],[0 1 0;0 0 -1;-1 0 0],[0 0 -1;-1 0 0;0 1 0],[0 -1 0;0 0 1;-1 0 0], # C3 (γ,δ)
             [1 0 0;0 -1 0;0 0 -1],[-1 0 0;0 1 0;0 0 -1],[-1 0 0;0 -1 0;0 0 1], # C2 (x,y,z)
             [0 1 0;1 0 0;0 0 -1],[0 -1 0;-1 0 0;0 0 -1],[0 0 1;0 -1 0;1 0 0],[0 0 -1;0 -1 0;-1 0 0],[-1 0 0;0 0 1;0 1 0],[-1 0 0;0 0 -1;0 -1 0], # σd (xy,xz,yz)
             [1 0 0;0 0 1;0 -1 0],[1 0 0;0 0 -1;0 1 0],[0 0 -1;0 1 0;1 0 0],[0 0 1;0 1 0;-1 0 0],[0 1 0;-1 0 0;0 0 1],[0 -1 0;1 0 0;0 0 1]], # S4 (x,y,z)
    "T2" => [[1 0 0;0 1 0;0 0 1], # E
             [0 0 1;1 0 0;0 1 0],[0 1 0;0 0 1;1 0 0],[0 0 1;-1 0 0;0 -1 0],[0 -1 0;0 0 -1;1 0 0], # C3 (α,β)
             [0 0 -1;1 0 0;0 -1 0],[0 1 0;0 0 -1;-1 0 0],[0 0 -1;-1 0 0;0 1 0],[0 -1 0;0 0 1;-1 0 0], # C3 (γ,δ)
             [1 0 0;0 -1 0;0 0 -1],[-1 0 0;0 1 0;0 0 -1],[-1 0 0;0 -1 0;0 0 1], # C2 (x,y,z)
             [0 -1 0;-1 0 0;0 0 1],[0 1 0;1 0 0;0 0 1],[0 0 -1;0 1 0;-1 0 0],[0 0 1;0 1 0;1 0 0],[1 0 0;0 0 -1;0 -1 0],[1 0 0;0 0 1;0 1 0], # σd (xy,xz,yz)
             [-1 0 0;0 0 -1;0 1 0],[-1 0 0;0 0 1;0 -1 0],[0 0 1;0 -1 0;-1 0 0],[0 0 -1;0 -1 0;1 0 0],[0 -1 0;1 0 0;0 0 -1],[0 1 0;-1 0 0;0 0 -1]]) # S4 (x,y,z)
irrm_O = Dict(
    "A1" => [[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1]],
    "A2" => [[1],[-1],[1],[-1],[-1],[1],[-1],[-1],[1],[-1],[1],[1],[1],[1],[1],[1],[1],[1],[-1],[-1],[-1],[-1],[-1],[-1]],
    "E" => [[1 0;0 1],
            [-c3 -s3;-s3 c3],[1 0;0 1],[-c3 -s3;-s3 c3],
            [-c3 s3;s3 c3],[1 0;0 1],[-c3 s3;s3 c3],
            [1 0;0 -1],[1 0;0 1],[1 0;0 -1],
            [-c3 -s3;s3 -c3],[-c3 s3;-s3 -c3],[-c3 s3;-s3 -c3],[-c3 -s3;s3 -c3],[-c3 s3;-s3 -c3],[-c3 -s3;s3 -c3],[-c3 -s3;s3 -c3],[-c3 s3;-s3 -c3],
            [-c3 s3;s3 c3],[-c3 s3;s3 c3],[1 0;0 -1],[1 0;0 -1],[-c3 -s3;-s3 c3],[-c3 -s3;-s3 c3]],
    "T1" =>[[1 0 0;0 1 0;0 0 1],[1 0 0;0 0 -1;0 1 0],[1 0 0;0 -1 0;0 0 -1],[1 0 0;0 0 1;0 -1 0],[0 0 1;0 1 0;-1 0 0],[-1 0 0;0 1 0;0 0 -1],
            [0 0 -1;0 1 0;1 0 0],[0 -1 0;1 0 0;0 0 1],[-1 0 0;0 -1 0;0 0 1],[0 1 0;-1 0 0;0 0 1],[0 0 1;1 0 0;0 1 0],[0 1 0;0 0 1;1 0 0],
            [0 -1 0;0 0 -1;1 0 0],[0 -0 1;-1 0 -0;0 -1 0],[0 1 0;0 0 -1;-1 0 0],[0 0 -1;1 0 -0;-0 -1 0],[0 0 -1;-1 0 0;0 1 0],[0 -1 -0;-0 0 1;-1 0 0],
            [0 0 1;0 -1 0;1 0 0],[0 0 -1;0 -1 0;-1 0 0],[0 1 0;1 0 0;0 0 -1],[0 -1 0;-1 0 0;0 0 -1],[-1 0 0;0 0 1;0 1 0],[-1 0 0;0 0 -1;0 -1 0]],
    "T2" =>[[1 0 0;0 1 0;0 0 1],[-1 0 0;0 0 1;0 -1 0],[1 0 0;0 -1 0;0 0 -1],[-1 0 0;0 0 -1;0 1 0],[0 0 -1;0 -1 0;1 0 0],[-1 0 0;0 1 0;0 0 -1],
            [0 0 1;0 -1 0;-1 0 0],[0 1 0;-1 0 0;0 0 -1],[-1 0 0;0 -1 0;0 0 1],[0 -1 0;1 0 0;0 0 -1],[0 0 1;1 0 0;0 1 0],[0 1 0;0 0 1;1 0 0],
            [0 -1 0;0 0 -1;1 0 0],[0 -0 1;-1 0 -0;0 -1 0],[0 1 0;0 0 -1;-1 0 0],[0 0 -1;1 0 -0;-0 -1 0],[0 0 -1;-1 0 0;0 1 0],[0 -1 -0;-0 0 1;-1 0 0],
            [0 0 -1;0 1 0;-1 0 0],[0 0 1;0 1 0;1 0 0],[0 -1 0;-1 0 0;0 0 1],[0 1 0;1 0 0;0 0 1],[1 0 0;0 0 -1;0 -1 0],[1 0 0;0 0 1;0 1 0]])
irrm_Oh = Dict(
    "A1g" => [[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],
                 [1],[1],[1],[1],[1],[1],[1],[1],
                 [1],[1],[1],[1],[1],[1],
             [1],[1],[1],[1],[1],[1],[1],[1],[1],[1],
                 [1],[1],[1],[1],[1],[1],[1],[1],
                 [1],[1],[1],[1],[1],[1]],
    "A2g" => [[1],[-1],[1],[-1],[-1],[1],[-1],[-1],[1],[-1],
                 [1],[1],[1],[1],[1],[1],[1],[1],
                 [-1],[-1],[-1],[-1],[-1],[-1],
             [1],[-1],[1],[-1],[-1],[1],[-1],[-1],[1],[-1],
                 [1],[1],[1],[1],[1],[1],[1],[1],
                 [-1],[-1],[-1],[-1],[-1],[-1]],
    "Eg" => [[1 0;0 1],
            [-c3 -s3;-s3 c3],[1 0;0 1],[-c3 -s3;-s3 c3],
            [-c3 s3;s3 c3],[1 0;0 1],[-c3 s3;s3 c3],
            [1 0;0 -1],[1 0;0 1],[1 0;0 -1],
            [-c3 -s3;s3 -c3],[-c3 s3;-s3 -c3],[-c3 s3;-s3 -c3],[-c3 -s3;s3 -c3],[-c3 s3;-s3 -c3],[-c3 -s3;s3 -c3],[-c3 -s3;s3 -c3],[-c3 s3;-s3 -c3],
            [-c3 s3;s3 c3],[-c3 s3;s3 c3],[1 0;0 -1],[1 0;0 -1],[-c3 -s3;-s3 c3],[-c3 -s3;-s3 c3],
            [1 0;0 1],
            [-c3 -s3;-s3 c3],[1 0;0 1],[-c3 -s3;-s3 c3],
            [-c3 s3;s3 c3],[1 0;0 1],[-c3 s3;s3 c3],
            [1 0;0 -1],[1 0;0 1],[1 0;0 -1],
            [-c3 s3;-s3 -c3],[-c3 -s3;s3 -c3],[-c3 -s3;s3 -c3],[-c3 s3;-s3 -c3],[-c3 -s3;s3 -c3],[-c3 s3;-s3 -c3],[-c3 s3;-s3 -c3],[-c3 -s3;s3 -c3],
            [-c3 s3;s3 c3],[-c3 s3;s3 c3],[1 0;0 -1],[1 0;0 -1],[-c3 -s3;-s3 c3],[-c3 -s3;-s3 c3]],
    "T1g" =>[[1 0 0;0 1 0;0 0 1],[1 0 0;0 0 -1;0 1 0],[1 0 0;0 -1 0;0 0 -1],[1 0 0;0 0 1;0 -1 0],
                                [0 0 1;0 1 0;-1 0 0],[-1 0 0;0 1 0;0 0 -1],[0 0 -1;0 1 0;1 0 0],
                                [0 -1 0;1 0 0;0 0 1],[-1 0 0;0 -1 0;0 0 1],[0 1 0;-1 0 0;0 0 1],
            [0 0 1;1 0 0;0 1 0],[0 1 0;0 0 1;1 0 0],[0 -1 0;0 0 -1;1 0 0],[0 -0 1;-1 0 -0;0 -1 0],
            [0 1 0;0 0 -1;-1 0 0],[0 0 -1;1 0 -0;-0 -1 0],[0 0 -1;-1 0 0;0 1 0],[0 -1 -0;-0 0 1;-1 0 0],
            [0 0 1;0 -1 0;1 0 0],[0 0 -1;0 -1 0;-1 0 0],[0 1 0;1 0 0;0 0 -1],[0 -1 0;-1 0 0;0 0 -1],[-1 0 0;0 0 1;0 1 0],[-1 0 0;0 0 -1;0 -1 0],
            [1 0 0;0 1 0;0 0 1],[1 0 0;0 0 1;0 -1 0],[1 0 0;0 -1 0;0 0 -1],[1 0 0;0 0 -1;0 1 0],
                                [0 0 -1;0 1 0;1 0 0],[-1 0 0;0 1 0;0 0 -1],[0 0 1;0 1 0;-1 0 0],
                                [0 1 0;-1 0 0;0 0 1],[-1 0 0;0 -1 0;0 0 1],[0 -1 0;1 0 0;0 0 1],
            [0 1 0;0 0 1;1 0 0],[0 0 1;1 0 0;0 1 0],[0 -0 1;-1 0 -0;0 -1 0],[0 -1 0;0 0 -1;1 0 0],
            [0 0 -1;1 0 -0;-0 -1 0],[0 1 0;0 0 -1;-1 0 0],[0 -1 -0;-0 0 1;-1 0 0],[0 0 -1;-1 0 0;0 1 0],
            [0 0 1;0 -1 0;1 0 0],[0 0 -1;0 -1 0;-1 0 0],[0 1 0;1 0 0;0 0 -1],[0 -1 0;-1 0 0;0 0 -1],[-1 0 0;0 0 1;0 1 0],[-1 0 0;0 0 -1;0 -1 0]],
    "T2g" =>[[1 0 0;0 1 0;0 0 1],[-1 0 0;0 0 1;0 -1 0],[1 0 0;0 -1 0;0 0 -1],[-1 0 0;0 0 -1;0 1 0],
                                [0 0 -1;0 -1 0;1 0 0],[-1 0 0;0 1 0;0 0 -1],[0 0 1;0 -1 0;-1 0 0],
                                [0 1 0;-1 0 0;0 0 -1],[-1 0 0;0 -1 0;0 0 1],[0 -1 0;1 0 0;0 0 -1],
            [0 0 1;1 0 0;0 1 0],[0 1 0;0 0 1;1 0 0],[0 -1 0;0 0 -1;1 0 0],[0 -0 1;-1 0 -0;0 -1 0],
            [0 1 0;0 0 -1;-1 0 0],[0 0 -1;1 0 -0;-0 -1 0],[0 0 -1;-1 0 0;0 1 0],[0 -1 -0;-0 0 1;-1 0 0],
            [0 0 -1;0 1 0;-1 0 0],[0 0 1;0 1 0;1 0 0],[0 -1 0;-1 0 0;0 0 1],[0 1 0;1 0 0;0 0 1],[1 0 0;0 0 -1;0 -1 0],[1 0 0;0 0 1;0 1 0],
            [1 0 0;0 1 0;0 0 1],[-1 0 0;0 0 -1;0 1 0],[1 0 0;0 -1 0;0 0 -1],[-1 0 0;0 0 1;0 -1 0],
                                [0 0 1;0 -1 0;-1 0 0],[-1 0 0;0 1 0;0 0 -1],[0 0 -1;0 -1 0;1 0 0],
                                [0 -1 0;1 0 0;0 0 -1],[-1 0 0;0 -1 0;0 0 1],[0 1 0;-1 0 0;0 0 -1],
            [0 1 0;0 0 1;1 0 0],[0 0 1;1 0 0;0 1 0],[0 -0 1;-1 0 -0;0 -1 0],[0 -1 0;0 0 -1;1 0 0],
            [0 0 -1;1 0 -0;-0 -1 0],[0 1 0;0 0 -1;-1 0 0],[0 -1 -0;-0 0 1;-1 0 0],[0 0 -1;-1 0 0;0 1 0],
            [0 0 -1;0 1 0;-1 0 0],[0 0 1;0 1 0;1 0 0],[0 -1 0;-1 0 0;0 0 1],[0 1 0;1 0 0;0 0 1],[1 0 0;0 0 -1;0 -1 0],[1 0 0;0 0 1;0 1 0]],
    "A1u" => [[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],
                 [1],[1],[1],[1],[1],[1],[1],[1],
                 [1],[1],[1],[1],[1],[1],
             [-1],[-1],[-1],[-1],[-1],[-1],[-1],[-1],[-1],[-1],
                 [-1],[-1],[-1],[-1],[-1],[-1],[-1],[-1],
                 [-1],[-1],[-1],[-1],[-1],[-1]],
    "A2u" => [[1],[-1],[1],[-1],[-1],[1],[-1],[-1],[1],[-1],
                 [1],[1],[1],[1],[1],[1],[1],[1],
                 [-1],[-1],[-1],[-1],[-1],[-1],
             [-1],[1],[-1],[1],[1],[-1],[1],[1],[-1],[1],
                 [-1],[-1],[-1],[-1],[-1],[-1],[-1],[-1],
                 [1],[1],[1],[1],[1],[1]],
    "Eu" => [[1 0;0 1],
            [-c3 -s3;-s3 c3],[1 0;0 1],[-c3 -s3;-s3 c3],
            [-c3 s3;s3 c3],[1 0;0 1],[-c3 s3;s3 c3],
            [1 0;0 -1],[1 0;0 1],[1 0;0 -1],
            [-c3 -s3;s3 -c3],[-c3 s3;-s3 -c3],[-c3 s3;-s3 -c3],[-c3 -s3;s3 -c3],[-c3 s3;-s3 -c3],[-c3 -s3;s3 -c3],[-c3 -s3;s3 -c3],[-c3 s3;-s3 -c3],
            [-c3 s3;s3 c3],[-c3 s3;s3 c3],[1 0;0 -1],[1 0;0 -1],[-c3 -s3;-s3 c3],[-c3 -s3;-s3 c3],
            -1*[1 0;0 1],
            -1*[-c3 -s3;-s3 c3],-1*[1 0;0 1],-1*[-c3 -s3;-s3 c3],
            -1*[-c3 s3;s3 c3],-1*[1 0;0 1],-1*[-c3 s3;s3 c3],
            -1*[1 0;0 -1],-1*[1 0;0 1],-1*[1 0;0 -1],
            -1*[-c3 s3;-s3 -c3],-1*[-c3 -s3;s3 -c3],-1*[-c3 -s3;s3 -c3],-1*[-c3 s3;-s3 -c3],-1*[-c3 -s3;s3 -c3],-1*[-c3 s3;-s3 -c3],-1*[-c3 s3;-s3 -c3],-1*[-c3 -s3;s3 -c3],
            -1*[-c3 s3;s3 c3],-1*[-c3 s3;s3 c3],-1*[1 0;0 -1],-1*[1 0;0 -1],-1*[-c3 -s3;-s3 c3],-1*[-c3 -s3;-s3 c3]],
    "T1u" =>[[1 0 0;0 1 0;0 0 1],[1 0 0;0 0 -1;0 1 0],[1 0 0;0 -1 0;0 0 -1],[1 0 0;0 0 1;0 -1 0],
                                [0 0 1;0 1 0;-1 0 0],[-1 0 0;0 1 0;0 0 -1],[0 0 -1;0 1 0;1 0 0],
                                [0 -1 0;1 0 0;0 0 1],[-1 0 0;0 -1 0;0 0 1],[0 1 0;-1 0 0;0 0 1],
            [0 0 1;1 0 0;0 1 0],[0 1 0;0 0 1;1 0 0],[0 -1 0;0 0 -1;1 0 0],[0 -0 1;-1 0 -0;0 -1 0],
            [0 1 0;0 0 -1;-1 0 0],[0 0 -1;1 0 -0;-0 -1 0],[0 0 -1;-1 0 0;0 1 0],[0 -1 -0;-0 0 1;-1 0 0],
            [0 0 1;0 -1 0;1 0 0],[0 0 -1;0 -1 0;-1 0 0],[0 1 0;1 0 0;0 0 -1],[0 -1 0;-1 0 0;0 0 -1],[-1 0 0;0 0 1;0 1 0],[-1 0 0;0 0 -1;0 -1 0],
            -1*[1 0 0;0 1 0;0 0 1],-1*[1 0 0;0 0 1;0 -1 0],-1*[1 0 0;0 -1 0;0 0 -1],-1*[1 0 0;0 0 -1;0 1 0],
                                   -1*[0 0 -1;0 1 0;1 0 0],-1*[-1 0 0;0 1 0;0 0 -1],-1*[0 0 1;0 1 0;-1 0 0],
                                   -1*[0 1 0;-1 0 0;0 0 1],-1*[-1 0 0;0 -1 0;0 0 1],-1*[0 -1 0;1 0 0;0 0 1],
            -1*[0 1 0;0 0 1;1 0 0],-1*[0 0 1;1 0 0;0 1 0],-1*[0 -0 1;-1 0 -0;0 -1 0],-1*[0 -1 0;0 0 -1;1 0 0],
            -1*[0 0 -1;1 0 -0;-0 -1 0],-1*[0 1 0;0 0 -1;-1 0 0],-1*[0 -1 -0;-0 0 1;-1 0 0],-1*[0 0 -1;-1 0 0;0 1 0],
            -1*[0 0 1;0 -1 0;1 0 0],-1*[0 0 -1;0 -1 0;-1 0 0],-1*[0 1 0;1 0 0;0 0 -1],-1*[0 -1 0;-1 0 0;0 0 -1],-1*[-1 0 0;0 0 1;0 1 0],-1*[-1 0 0;0 0 -1;0 -1 0]],
    "T2u" =>[[1 0 0;0 1 0;0 0 1],[-1 0 0;0 0 1;0 -1 0],[1 0 0;0 -1 0;0 0 -1],[-1 0 0;0 0 -1;0 1 0],
                                [0 0 -1;0 -1 0;1 0 0],[-1 0 0;0 1 0;0 0 -1],[0 0 1;0 -1 0;-1 0 0],
                                [0 1 0;-1 0 0;0 0 -1],[-1 0 0;0 -1 0;0 0 1],[0 -1 0;1 0 0;0 0 -1],
            [0 0 1;1 0 0;0 1 0],[0 1 0;0 0 1;1 0 0],[0 -1 0;0 0 -1;1 0 0],[0 -0 1;-1 0 -0;0 -1 0],
            [0 1 0;0 0 -1;-1 0 0],[0 0 -1;1 0 -0;-0 -1 0],[0 0 -1;-1 0 0;0 1 0],[0 -1 -0;-0 0 1;-1 0 0],
            [0 0 -1;0 1 0;-1 0 0],[0 0 1;0 1 0;1 0 0],[0 -1 0;-1 0 0;0 0 1],[0 1 0;1 0 0;0 0 1],[1 0 0;0 0 -1;0 -1 0],[1 0 0;0 0 1;0 1 0],
            -1*[1 0 0;0 1 0;0 0 1],-1*[-1 0 0;0 0 -1;0 1 0],-1*[1 0 0;0 -1 0;0 0 -1],-1*[-1 0 0;0 0 1;0 -1 0],
                                   -1*[0 0 1;0 -1 0;-1 0 0],-1*[-1 0 0;0 1 0;0 0 -1],-1*[0 0 -1;0 -1 0;1 0 0],
                                   -1*[0 -1 0;1 0 0;0 0 -1],-1*[-1 0 0;0 -1 0;0 0 1],-1*[0 1 0;-1 0 0;0 0 -1],
            -1*[0 1 0;0 0 1;1 0 0],-1*[0 0 1;1 0 0;0 1 0],-1*[0 -0 1;-1 0 -0;0 -1 0],-1*[0 -1 0;0 0 -1;1 0 0],
            -1*[0 0 -1;1 0 -0;-0 -1 0],-1*[0 1 0;0 0 -1;-1 0 0],-1*[0 -1 -0;-0 0 1;-1 0 0],-1*[0 0 -1;-1 0 0;0 1 0],
            -1*[0 0 -1;0 1 0;-1 0 0],-1*[0 0 1;0 1 0;1 0 0],-1*[0 -1 0;-1 0 0;0 0 1],-1*[0 1 0;1 0 0;0 0 1],-1*[1 0 0;0 0 -1;0 -1 0],-1*[1 0 0;0 0 1;0 1 0]],
)

function irrep_things(pg)
    irrm = eval(Meta.parse("irrm_"*pg))
    symels = pg_to_symels(pg)
    mtable = build_mult_table(symels)
    display(mtable)
    mtab_chks = true
    for k in keys(irrm)
        mtab_chk = mtable_check(irrm[k], mtable)
        if mtab_chk == false
            mtab_chks = false
        end
    end
    gchk = goat_chk(irrm)
    return mtab_chks, gchk
end

function mtable_check(irrm, mtable)
    l = size(mtable)[1]
    for i = 1:l, j = 1:l
        if mtable[i,j] ∈ multifly(irrm, i, j)
            continue
        else
            println(irrm)
            println(i,j)
            println(multifly(irrm, i, j))
            return false
        end
    end
    return true
end

function multifly(irrm, a, b)
    l = length(irrm)
    out = []
    errl = []
    for i = 1:l
        if size(irrm[a])[1] == 1
            r = [irrm[a][1]*irrm[b][1]]
        else
            r = irrm[a]*irrm[b]
        end
        push!(errl, r)
        if isapprox(irrm[i], r, atol = 1e-10)
            push!(out, i)
        end
    end
    return out
    return 0
end

function goat_chk(irrm::Dict)
    return_full_chk = false
    l = length(irrm)
    gc_final = []
    for (a,μ) in enumerate(keys(irrm)), (b,ν) in enumerate(keys(irrm))
        g = length(irrm[μ])
        d1 = size(irrm[μ][1])[1]
        d2 = size(irrm[ν][1])[1]
        if return_full_chk
            gc = zeros(d1,d2,d1,d2)
        end
        for i = 1:d1, j = 1:d2
            for l = 1:d1, m = 1:d2
                gchk = goat_chk(irrm[μ], irrm[ν], i,j,l,m)
                if μ == ν && i == j && l == m
                    expected = g / d1
                else
                    expected = 0
                end
                if return_full_chk
                    gc[i,j,l,m] = gchk
                elseif isapprox(gchk, expected, atol=1E-10)
                    continue
                else
                    #return false
                    throw(ArgumentError("GOAT Check failed for irreps $(μ) and $(ν), and indices $(i),$(l),$(j),$(m). Returned value $(gchk). Expected value $(expected)"))
                end
            end
        end
        if return_full_chk
            push!(gc_final, [μ,ν,gc])
        end
    end
    if return_full_chk
        return gc_final
    else
        return true
    end
end

function goat_chk(irrm1, irrm2, i, j, l, m)
    a = 0
    for r = 1:length(irrm1)
        a += irrm1[r][i,l]*irrm2[r][j,m]
    end
    return a
end